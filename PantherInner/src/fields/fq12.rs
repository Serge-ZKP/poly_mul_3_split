use ark_ff::{fields::*, MontFp};

use super::{fq6::*, fq2::*};

pub type Fq12 = Fp12<Fq12Config>;

#[derive(Clone, Copy)]
pub struct Fq12Config;

impl Fp12Config for Fq12Config {
    type Fp6Config = Fq6Config;

    const NONRESIDUE: Fq6 = Fq6::new(Fq2::ZERO, Fq2::ONE, Fq2::ZERO);   //quotienting with w^2-v


    const FROBENIUS_COEFF_FP12_C1: &'static [Fq2] = &[
        // Fp2::NONRESIDUE^(((q^0) - 1) / 6)
        Fp2::new(MontFp!("1"), MontFp!("0")),
        // Fp2::NONRESIDUE^(((q^1) - 1) / 6)
        Fp2::new(
            MontFp!("128400413071572264820910655899391625667636955563678643354676251185499231770813995605821208872937784994510582215999965294684222881083538032717069982312327196757622170672748050062292"),
            MontFp!("412806392087026481562940568160014768297408115473968746615502280711510921868931607744405858592631206332346180331865936256548833950609153165586663500941030172043930904468932275677734"),
        ),
        // Fp2::NONRESIDUE^(((q^2) - 1) / 6)
        Fp2::new(
            MontFp!("513980861594373651770601558444079704127882688121546364339055196547128085448349959501146338546852718346358950584090457672461966464282282545951008025819669694598103893234710186123905"),
            MontFp!("0"),
        ),
        // Fp2::NONRESIDUE^(((q^3) - 1) / 6)
        Fp2::new(
            MontFp!("363962944771352012159466876047182906508248203918713065615219362850811278208084863382047226185613058516373667857322019065111325333910295209739658933912360918359755718368215137891931"),
            MontFp!("353482882636011592672768540904810651958848326501065731903679603426158494610112181915743721545772147556253404092179998493880551019762337048448930925117252776591619566401161053820526"),
        ),
        // Fp2::NONRESIDUE^(((q^4) - 1) / 6)
        Fp2::new(
            MontFp!("513980861594373651770601558444079704127882688121546364339055196547128085448349959501146338546852718346358950584090457672461966464282282545951008025819669694598103893234710186123904"),
            MontFp!("0"),
        ),
        // Fp2::NONRESIDUE^(((q^5) - 1) / 6)
        Fp2::new(
            MontFp!("235562531699779747338556220147791280840611248355034422260543111665312046437270867776226017312675273521863085641322053770427102452826757177022588951600033721602133547695467087829639"),
            MontFp!("515541600638098161644838527329542630435386582482026706815871655561111302235171639746851758784801399490426276626868954224631306771171094112829105948282124657274280571017585843514441"),
        ),
        // Fp2::NONRESIDUE^(((q^6) - 1) / 6)
        Fp2::new(
            MontFp!("574865110089113050535010554584746746773946371454929721527694332846463729493991065575513895831660458266519052866554891987299589702017910229966838524105902052726591909085357065371648"),
            MontFp!("0"),
        ),
        // Fp2::NONRESIDUE^(((q^7) - 1) / 6)
        Fp2::new(
            MontFp!("446464697017540785714099898685355121106309415891251078173018081660964497723177069969692686958722673272008470650554926692615366820934372197249768541793574855968969738412609015309357"),
            MontFp!("162058718002086568972069986424731978476538255980960974912192052134952807625059457831108037239029251934172872534688955730750755751408757064380175023164871880682661004616424789693915"),
        ),
        // Fp2::NONRESIDUE^(((q^8) - 1) / 6)
        Fp2::new(
            MontFp!("60884248494739398764408996140667042646063683333383357188639136299335644045641106074367557284807739920160102282464434314837623237735627684015830498286232358128488015850646879247744"),
            MontFp!("0"),
        ),
        // Fp2::NONRESIDUE^(((q^9) - 1) / 6)
        Fp2::new(
            MontFp!("210902165317761038375543678537563840265698167536216655912474969995652451285906202193466669646047399750145385009232872922188264368107615020227179590193541134366836190717141927479718"),
            MontFp!("221382227453101457862242013679936094815098044953863989624014729420305234883878883659770174285888310710265648774374893493419038682255573181517907598988649276134972342684196011551123"),
        ),
        // Fp2::NONRESIDUE^(((q^10) - 1) / 6)
        Fp2::new(
            MontFp!("60884248494739398764408996140667042646063683333383357188639136299335644045641106074367557284807739920160102282464434314837623237735627684015830498286232358128488015850646879247745"),
            MontFp!("0"),
        ),
        // Fp2::NONRESIDUE^(((q^11) - 1) / 6)
        Fp2::new(
            MontFp!("339302578389333303196454334436955465933335123099895299267151221181151683056720197799287878518985184744655967225232838216872487249191153052944249572505868331124458361389889977542010"),
            MontFp!("59323509451014888890172027255204116338559788972903014711822677285352427258819425828662137046859058776092776239685937762668282930846816117137732575823777395452311338067771221857208"),
        ),
    ];

}

#[test]
fn test_fq12(){
    //test w^6=7u+49
    const FQ6_ZERO:Fq6=Fq6::new(FQ2_ZERO,FQ2_ZERO,FQ2_ZERO);
    const FQ6_ONE:Fq6=Fq6::new(FQ2_ONE,FQ2_ZERO,FQ2_ZERO);
    let w=Fq12::new(FQ6_ZERO,FQ6_ONE);
    let nonresidue=Fq12::new(Fq6::new(Fq2::new(MontFp!("49"),MontFp!("7")),FQ2_ZERO,FQ2_ZERO),FQ6_ZERO);
    assert_eq!(w.pow(&[6]),nonresidue);
}

#[test]
pub fn test_frobenius() {
    use ark_ff::Field;
    use ark_std::UniformRand;
    let mut rng = ark_std::test_rng();
    let characteristic = Fq12::characteristic();
    let max_power = (Fq12::extension_degree() + 1) as usize;

    for _ in 0..10 {
        let a = Fq12::rand(&mut rng);

        let mut a_0 = a;
        a_0 = a_0.frobenius_map(0);
        assert_eq!(a, a_0);

        let mut a_q = a.pow(&characteristic);
        for power in 1..max_power {
            let mut a_qi = a;
            a_qi = a_qi.frobenius_map(power);
            assert_eq!(a_qi, a_q, "failed on power {}", power);

            a_q = a_q.pow(&characteristic);
        }
    }
}