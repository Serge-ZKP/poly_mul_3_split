use ark_ff::{fields::*, MontFp};

use super::fq2::*;

pub type Fq6 = Fp6<Fq6Config>;

#[derive(Clone, Copy)]
pub struct Fq6Config;

impl Fp6Config for Fq6Config {
    type Fp2Config = Fq2Config;

    /// NONRESIDUE = (7U + 49)
    const NONRESIDUE: Fq2 = Fq2::new(MontFp!("49"), MontFp!("7"));   //quotienting by v^3-49-7u

    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP6_C1: &'static [Fq2] = &[
        // Fp2::NONRESIDUE^(((q^0) - 1) / 3)
        Fq2::new(MontFp!("1"), MontFp!("0")),

        // Fp2::NONRESIDUE^(((q^1) - 1) / 3)
        Fq2::new(
            MontFp!("409837028722283988711320157424819016901502556148869929127451638732709276745712563343532357064621453592717692429380097071085203213362788481252690045860320356945488744906598308905807"),
            MontFp!("563142099738849911880409002029659817030605019041796673082099080574905381713863500772322338907799792083237356362851655128934266028137968950532030309181467629529628624017525441657725"),
        ),
        // Fp2::NONRESIDUE^(((q^2) - 1) / 3)
        Fq2::new(
            MontFp!("513980861594373651770601558444079704127882688121546364339055196547128085448349959501146338546852718346358950584090457672461966464282282545951008025819669694598103893234710186123904"),
            MontFp!("0"),
        ),
        // Fp2::NONRESIDUE^(((q^3) - 1) / 3)
        Fq2::new(
            MontFp!("550598838123771101766438078674608965398933666787768168254294432541971964244937976872864383664742340513942349041332614215984369570139318104268950568885838066123999098181879277260078"),
            MontFp!("510158059966937247537069301502534952979776537125661965052896911433446639109668180733049143147644347926052017609607791789731026815356426664916259543745065466733911842579530760081511"),
        ),
        // Fp2::NONRESIDUE^(((q^4) - 1) / 3)
        Fq2::new(
            MontFp!("60884248494739398764408996140667042646063683333383357188639136299335644045641106074367557284807739920160102282464434314837623237735627684015830498286232358128488015850646879247744"),
            MontFp!("0"),
        ),
        // Fp2::NONRESIDUE^(((q^5) - 1) / 3)
        Fq2::new(
            MontFp!("189294353332171010592262873070065511247456519973221345673642594418246217997331590934631050933957122426378064262397072687529606620533713874412036433465645682383695975082236544577413"),
            MontFp!("76430060472438941652542805637298723537511186742400804920392673684575438164450449645656309607876776523748731760650337055933886560541424844485387195285271009189643351573657929004062"),
        ),
];

    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP6_C2: &'static [Fq2] = &[
        // Fq2(u + 1)**(((2q^0) - 2) / 3)
        Fq2::new(
            MontFp!("1"),
            MontFp!("0"),
        ),
        // Fq2(u + 1)**(((2q^1) - 2) / 3)
        Fq2::new(
            MontFp!("47485872152510177622276674190619872068170548059943858027310142590695160050832460035696859775881669612905091213676955389018817667296336316370726350882558562803034514391279183531596"),
            MontFp!("218238541652099774622529004516744362716797158655678292566725125512126496110949580544590500765952229337221704809370454354444675513778802402526697277868358128770304812264615290049879"),
        ),
        // Fq2(u + 1)**(((2q^2) - 2) / 3)
        Fq2::new(
            MontFp!("60884248494739398764408996140667042646063683333383357188639136299335644045641106074367557284807739920160102282464434314837623237735627684015830498286232358128488015850646879247744"),
            MontFp!("0"),
        ),
        // Fq2(u + 1)**(((2q^3) - 2) / 3)
        Fq2::new(
            MontFp!("391526963850246911848384329512735519420866485130422885388633815810101498265166882672896790013065377135327032166715287831219316123969659077251636962970531369940214672700458635545899"),
            MontFp!("94364824151348386920112496079661652183897347328077526390863195318853375595448209357502840967660853038148281617670226187196490559508175461966734625554470110191104358975594336424041"),
        ),
        // Fq2(u + 1)**(((2q^4) - 2) / 3)
        Fq2::new(
            MontFp!("513980861594373651770601558444079704127882688121546364339055196547128085448349959501146338546852718346358950584090457672461966464282282545951008025819669694598103893234710186123904"),
            MontFp!("0"),
        ),
        // Fq2(u + 1)**(((2q^5) - 2) / 3)
        Fq2::new(
            MontFp!("135852274086355961064349550881391355284909338264562978111750374445667071177991722866920246042713411518286929486162648767061455910751914836344475210252812119983342721993619246294154"),
            MontFp!("262261744285664888992369053988340731873251865471173902570106012015483857787593275673420554098047375891149066439514211445658423628730932365473406620683073813765182737845147438897729"),
        ),
    ];

    
}

#[test]
fn test_fq6(){
    //check v^3=47u+49
    let v= Fq6::new(FQ2_ZERO,FQ2_ONE,FQ2_ZERO);
    let nonresidue=Fq6::new(Fq2::new(MontFp!("49"),MontFp!("7")),FQ2_ZERO,FQ2_ZERO);
    assert_eq!(v.pow(&[3]),nonresidue);
}

#[test]
pub fn test_frobenius() {
    use ark_ff::Field;
    use ark_std::UniformRand;
    let mut rng = ark_std::test_rng();
    let characteristic = Fq6::characteristic();
    let max_power = (Fq6::extension_degree() + 1) as usize;

    for _ in 0..10 {
        let a = Fq6::rand(&mut rng);

        let mut a_0 = a;
        a_0 = a_0.frobenius_map(0);
        assert_eq!(a, a_0);

        let mut a_q = a.pow(&characteristic);
        for power in 1..max_power {
            let mut a_qi = a;
            a_qi = a_qi.frobenius_map(power);
            assert_eq!(a_qi, a_q, "failed on power {}", power);

            a_q = a_q.pow(&characteristic);
        }
    }
}
